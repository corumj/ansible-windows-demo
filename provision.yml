---
- name: Provision instance to deploy app
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    id: "windows-demo-app-{{ name }}"
  tasks:
    - name: Get Instance facts 
      block:
        - name: Get Instance facts
          community.aws.ec2_instance_info:
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            region: "{{ region }}"
          register: result

        - name: Instance id
          debug:
            msg: "ID: {{ item.instance_id }} - State: {{ item.state.name }} - Public DNS: {{ item.public_dns_name }}"
          loop: "{{ result.instances }}"

      tags: always 

    - name: Provision EC2 Instances
      block:

        - name: create a VPC 
          amazon.aws.ec2_vpc_net:
            name: "{{ id }}-vpc"
            cidr_block: 10.0.0.0/16
            region: "{{ region }}"
            tenancy: default
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            state: present
          register: demo_vpc

        # - name: Create security group external
        #   amazon.aws.ec2_group: 
        #     name: "{{ id }}-sec-group-external"
        #     description: Inbound WinRM and RDP 
        #     region: "{{ region }}"
        #     rules:
        #       - proto: tcp
        #         from_port: 80
        #         to_port: 80 
        #         cidr_ip: 0.0.0.0/0
        #       - proto: tcp 
        #         from_port: 5986 
        #         to_port: 5986 
        #         cidr_ip: 0.0.0.0/0  
        #       - proto: tcp
        #         from_port: 3389 
        #         to_port: 3389 
        #         cidr_ip: 0.0.0.0/0 
        #     rules_egress:
        #       - proto: -1 
        #         cidr_ip: 0.0.0.0/0 
        #     state: present
        #     aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        #     aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        #   register: external_sg

        - name: Create security group internal
          amazon.aws.ec2_group: 
            name: "{{ id }}-sec-group-internal"
            description: Inbound WinRM and RDP 
            region: "{{ region }}"
            rules:
              - proto: tcp
                from_port: 80
                to_port: 80 
                cidr_ip: 0.0.0.0/16
              - proto: tcp 
                from_port: 5986 
                to_port: 5986 
                cidr_ip: 0.0.0.0/16 
              - proto: tcp
                from_port: 3389 
                to_port: 3389 
                cidr_ip: 0.0.0.0/16
            rules_egress:
              - proto: -1 
                cidr_ip: 0.0.0.0/16
            vpc_id: "{{ demo_vpc.vpc.id }}"
            state: present
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
          register: internal_sg

        - name: Create a subnet on the VPC for our apps
          amazon.aws.ec2_vpc_subnet:
            vpc_id: "{{ demo_vpc.vpc.id }}"
            cidr: 10.0.0.0/16
            map_public: yes
            tags:
              Name: "{{ id }}-subnet"
            region: "{{ region }}"
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            state: present 
          register: demo_subnet

        - name: Print sg info 
          debug: 
            var: internal_sg

        - name: Provision AD Server Instance 
          community.aws.ec2_instance:
            state: present
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            name: "ad-{{ id }}"
            security_group: "{{ internal_sg.group_name }}"
            vpc_subnet_id: "{{ demo_subnet.subnet.id }}"
            image_id: "{{ aws_ami }}"
            instance_type: "{{ aws_instance_type }}"
            region: "{{ region }}"
            tags: 
              app: "{{ app }}"
              function: ad_server
            user_data: "{{ lookup('template', 'userdata.txt.j2') }}"
            wait: yes
          register: ad_ec2 

        - name: Provision Windows Server Instance App 1
          community.aws.ec2_instance:
            state: present
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            name: "app1-{{ id }}"
            security_groups: 
              - "{{ internal_sg.group_id }}"
            vpc_subnet_id: "{{ demo_subnet.subnet.id }}"
            image_id: "{{ aws_ami }}"
            instance_type: "{{ aws_instance_type }}"
            region: "{{ region }}"
            tags: 
              app: "{{ app }}"
              function: app1
            user_data: "{{ lookup('template', 'userdata.txt.j2') }}"
            wait: yes
          register: app1_ec2 

        - name: Provision Windows Server Instance App 2
          community.aws.ec2_instance:
            state: present
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            name: "app2-{{ id }}"
            security_groups: 
              - "{{ internal_sg.group_id }}"
            vpc_subnet_id: "{{ demo_subnet.subnet.id }}"
            image_id: "{{ aws_ami }}"
            instance_type: "{{ aws_instance_type }}"
            region: "{{ region }}"
            tags: 
              app: "{{ app }}"
              function: app2
            user_data: "{{ lookup('template', 'userdata.txt.j2') }}"
            wait: yes
          register: app2_ec2 

        - name: Update AWS Inventory
          awx.awx.tower_inventory_source_update:
            name: AWS  
            inventory: AWS
            wait: True
            tower_verify_ssl: false

        - name: Update the Windows group with the new hosts
          awx.awx.tower_group: 
            name: windows 
            inventory: AWS  
            hosts:
              - "{{ ad_ec2.instances[0].public_ip_address }}"
              - "{{ app1_ec2.instances[0].public_ip_address }}"
              - "{{ app2_ec2.instances[0].public_ip_address }}"            
            state: present 
            tower_verify_ssl: false

        - name: Wait for WinRM to answer on all hosts 
          wait_for:
            port: 5986
            host: "{{ item }}"
            timeout: 300 
          loop:
            - "{{ ad_ec2.instances[0].public_ip_address }}"
            - "{{ app1_ec2.instances[0].public_ip_address }}"
            - "{{ app2_ec2.instances[0].public_ip_address }}"
          
      tags: ['never', 'provision']

    - name: Deprovision ec2 instance
      block:
        - name: Remove EC2 Instances
          community.aws.ec2_instance:
            state: absent
            region: "{{ region }}"
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            filters:
              "tag:app": "{{ app }}"

        - name: Remove security group 
          amazon.aws.ec2_group: 
            name: "{{ id }}-sec-group"
            description: Inbound WinRM and RDP 
            region: "{{ region }}"
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            state: absent

        - name: retrieve vpc ID                 
          amazon.aws.ec2_vpc_net_info:
            region: "{{ region }}"
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            filters:
              "tag:Name": "{{ id }}-vpc"
          register: vpc_info 

        - name: Delete the subnet on the VPC  
          amazon.aws.ec2_vpc_subnet:
            vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
            cidr: 10.0.0.0/16
            tags:
              Name: "{{ id }}-subnet"
            region: "{{ region }}"
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            state: absent 
          when: vpc_info.vpcs

        - name: Remove the VPC 
          amazon.aws.ec2_vpc_net:
            name: "{{ id }}-vpc"
            cidr_block: 10.10.0.0/16
            region: "{{ region }}"
            tenancy: default
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            state: absent

      tags: ['never', 'deprovision']