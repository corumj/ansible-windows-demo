---
- name: Provision instance to deploy app
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    id: "windows-demo-app-{{ name }}"
  tasks:
    - name: Get Instance facts 
      block:
        - name: Get Instance facts
          community.aws.ec2_instance_info:
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            region: "{{ region }}"
          register: result

        - name: Instance id
          debug:
            msg: "ID: {{ item.instance_id }} - State: {{ item.state.name }} - Public DNS: {{ item.public_dns_name }}"
          loop: "{{ result.instances }}"

      tags: always 

    - name: Provision EC2 Instances
      block:

        - name: Create security group 
          amazon.aws.ec2_group: 
            name: "{{ id }}-sec-group"
            description: Inbound WinRM and RDP 
            region: "{{ region }}"
            rules:
              - proto: tcp
                from_port: 80
                to_port: 80 
                cidr_ip: 0.0.0.0/0
              - proto: tcp 
                from_port: 5986 
                to_port: 5986 
                cidr_ip: 0.0.0.0/0  
              - proto: tcp
                from_port: 3389 
                to_port: 3389 
                cidr_ip: 0.0.0.0/0 
            rules_egress:
              - proto: -1 
                cidr_ip: 0.0.0.0/0 
            state: present
          register: sg_out 

        - name: Provision AD Server Instance 
          community.aws.ec2_instance:
            state: present
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            # key_name: "{{ aws_key_name }}"
            name: "ad-{{ id }}"
            security_group: "{{ sg_out.group_id }}"
            image_id: "{{ aws_ami }}"
            instance_type: "{{ aws_instance_type }}"
            region: "{{ region }}"
            tags: 
              app: "{{ app }}"
              function: ad_server
            user_data: "{{ lookup('template', 'userdata.txt.j2') }}"
            wait: no
          register: ad_ec2 

        - name: Provision Windows Server Instance App 1
          community.aws.ec2_instance:
            state: present
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            # key_name: "{{ aws_key_name }}"
            name: "app1-{{ id }}"
            security_group: "{{ sg_out.group_id }}"
            image_id: "{{ aws_ami }}"
            instance_type: "{{ aws_instance_type }}"
            region: "{{ region }}"
            tags: 
              app: "{{ app }}"
              function: app1
            user_data: "{{ lookup('template', 'userdata.txt.j2') }}"
            wait: no
          register: app1_ec2 

        - name: Provision Windows Server Instance App 2
          community.aws.ec2_instance:
            state: present
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            # key_name: "{{ aws_key_name }}"
            name: "app2-{{ id }}"
            security_group: "{{ sg_out.group_id }}"
            image_id: "{{ aws_ami }}"
            instance_type: "{{ aws_instance_type }}"
            region: "{{ region }}"
            tags: 
              app: "{{ app }}"
              function: app2
            user_data: "{{ lookup('template', 'userdata.txt.j2') }}"
            wait: no
          register: app2_ec2 

        - name: print these variables
          debug:
            var: app2_ec2 

        - name: Wait for WinRM to answer on all hosts 
          wait_for:
            port: 5986
            host: "{{ item.instances[0].public_ip_address }}"
            timeout: 300 
          loop:
            - ad_ec2
            - app1_ec2
            - app2_ec2
          
      tags: ['never', 'provision']

    - name: Deprovision ec2 instance
      block:
        - name: Remove EC2 Instance 
          community.aws.ec2_instance:
            state: absent
            region: "{{ region }}"
            aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
            aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            filters:
              "tag:app": "{{ app }}"

        - name: Create security group 
          amazon.aws.ec2_group: 
            name: "{{ id }}-sec-group"
            description: Inbound WinRM and RDP 
            region: "{{ region }}"
            state: absent

      tags: ['never', 'deprovision']