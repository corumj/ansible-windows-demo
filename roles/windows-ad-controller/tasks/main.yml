---

- name: Set upstream DNS server 
  ansible.windows.win_dns_client:
    adapter_names: '*'
    ipv4_addresses:
      - '{{ upstream_dns_1 }}'
      - '{{ upstream_dns_2 }}'

- name: Stop the time service
  ansible.windows.win_service:
    name: w32time
    state: stopped 

- name: Set NTP Servers 
  win_shell: 'w32tm /config /syncfromflags:manual /manualpeerlist:"{{ ntp_servers }}"'

- name: Start the time service 
  ansible.windows.win_service:
    name: w32time 
    state: started 

# Only needed during install because of the restart, can enable later
- name: Disable firewall for domain, public and private profiles 
  win_firewall:
    state: disabled 
    profiles:
      - Domain 
      - Private 
      - Public 
  tags: disable_firewall 

- name: Change the hostname 
  ansible.windows.win_hostname:
    name: '{{ dc_hostname }}'
  register: hostname 

- name: Reboot 
  ansible.windows.win_reboot:
  when: hostname.reboot_required 

- name: Install Active Directory Domain Services 
  ansible.windows.win_feature:
    name: AD-Domain-Services 
    include_management_tools: yes 
    include_sub_features: yes 
    state: present 
  register: adds 

- name: Create Domain 
  ansible.windows.win_domain:
    dns_domain_name: '{{ domain_name }}'
    safe_mode_password: '{{ recovery_password }}'
  register: domain 

- name: Reboot 
  ansible.windows.win_reboot:
    msg: "Installing AD. Rebooting..."
    pre_reboot_delay: 15 
  when: domain.changed 

# Make sure dc is using itself as DNS server
# This should happen during promotion but... explicit is always better.

- name: Set internal DNS server
  ansible.windows.win_dns_client:
    adapter_names: '*'
    ipv4_addresses:
      - '127.0.0.1'

# Lots of retries on this next one - it does take a while for DS
# to finish spooling up and this cannot complete until then
- name: Get current DNS zones 
  win_shell: Get-DnsServerZone | Select ZoneName
  register: dnsserverzone 

- name: Create reverse DNS zone 
  win_shell: "Add-DnsServerPrimaryZone -NetworkID {{ reverse_dns_zone }} -ReplicationScope Forest"
  retries: 30
  delay: 60 
  register: dnszone 
  when: "reverse_dns_zone_name not in dnsserverzone.stdout"
  until: dnszone is succeeded 

- name: Add windows groups
  win_domain_group:
    name: Ansible Users 
    scope: global 

- name: Add Windows domain admin 
  win_domain_user:
    name: "Admin"
    upn: "Admin@{{ domain_name }}"
    state: present 
    enabled: yes 
    account_locked: no 
    groups:
      - Domain Admins 
    password: "{{ win_initial_password }}"
    update_password: on_create 
    password_expired: false 
    firstname: admin 
    surname: user 
    company: Red Hat 
    email: "Admin@{{ domain_name }}"

- name: Add windows AD users 
  win_domain_user:
    name: "{{ item }}"
    upn: "{{ item }}@{{ domain_name }}"
    state: present
    enabled: yes
    account_locked: no
    groups:
      - Ansible Users
    password: "{{ users_password }}"
    update_password: on_create
    password_expired: false
    firstname: user
    surname: user
    company: Red Hat
    email: "{{ item }}@{{ domain_name }}"
  with_items:
    - "{{ users }}"

# This section will create our OU and uses DSC
- name: Install latest nuget (required for DSC Resource Kit)
  win_shell: install-packageprovider -name nuget -force

- name: Install xActiveDirectory PS Module 
  win_psmodule:
    name: ActiveDirectoryDSC
    state: present 

- name: Create a Server OU 
  win_dsc:
    resource_name: ADOrganizationalUnit
    name: "Servers"
    path: "DC=demo,DC=lab"

- name: Create an Ansible OU 
  win_dsc:
    resource_name: ADOrganizationalUnit
    name: "Ansible"
    path: "OU=Servers,DC=demo,DC=lab"